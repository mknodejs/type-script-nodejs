string,
number 
boolean 

const person = {
	name: 'Hello',
	age: 23
}

console.log(person.test)  // error

const person: {
	name: string;
	age: number;
} = {
	name: 'Hello',
	age: 23
}

console.log(person.test)  // error


Of course object types can also be created for nested objects.

Let's say you have this JavaScript object:

const product = {
  id: 'abc1',
  price: 12.99,
  tags: ['great-offer', 'hot-and-new'],
  details: {
    title: 'Red Carpet',
    description: 'A great carpet - almost brand-new!'
  }
}
This would be the type of such an object:

{
  id: string;
  price: number;
  tags: string[],
  details: {
    title: string;
    description: string;
  }
}
So you have an object type in an object type so to say.


Array:

Tuple
	role : [number, string]
Enum 
	enum Role {
		ADMIN = 0, READ_ONLY 
	} 
	
Any

Union 
	input1: number | string

Literal Type 
	resul : 'as-number' | 'as-text'

Custom 
type ConversionDescriptor = 'as-number' | 'as-text'
type Input = number | string

Type Aliases & Object Types
	type User = { name: string; age: number };
	const u1: User = { name: 'Max', age: 30 }; // this works!

	type User = { name: string; age: number };
	 
	function greet(user: User) {
	  console.log('Hi, I am ' + user.name);
	}
	 
	function isOlder(user: User, checkAge: number) {
	  return checkAge > user.age;
	}
function as type

let combineValues : Fucntion 
let combineValues :  ()=> number
let combineValues :  (a: number, b: number)=> number
let combineValues :  (a: number, b: number, cb: (num: number)=> void)=> number


function addAndHandle(n1: number, n2: number, cb: (num: number) => void) {
  const result = n1 + n2;
  cb(result);
}

addAndHandle(10, 20, (result) => {
  console.log(result);
});


unknown vs never
	function generateError(message: string, code: number): never {
	  throw { message: message, errorCode: code };
	  // while (true) {}
	}

	generateError('An error occurred!', 500);
	
	
cntl+ space


Type script compiler 
1) watch mode==> tsc -w
2) complie all files in project 
	tsc --init
	tsconfig.json 
	"exclude" : ['abc.ts','**/*.dev.ts',"node_module"]   // any folder with .dev.ts file type,
	"include": ['abc.ts']
3) Important option 
	"target" :"ES2019"
	"module" : 
	"sourceMap" : true // super easy for UI project make debugging easy 
	"outDir": "./dist"
	"rootDir": "./src"
	"noEmitOnError" : true,
	"strict": true
		strict null check use ! 
		like const button = document.querySelector('button')!
		
tsconfig Docs: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
Compiler Config Docs: https://www.typescriptlang.org/docs/handbook/compiler-options.html
VS Code TS Debugging: https://code.visualstudio.com/docs/typescript/typescript-debugging






Class
public 
private 
private readonly
protected

1) Class Department {
		name: string ='Default'
		constructor(n: string ){
			this.name = n
		}
	}
	new Department("accounting")
	
2) 
class Department {
  // private id: string;
  // private name: string;
  private employees: string[] = [];

  constructor(private id: string, public name: string) {
    // this.id = id;
    // this.name = n;
  }

  describe(this: Department) {
    console.log(`Department (${this.id}): ${this.name}`);
  }

  addEmployee(employee: string) {
    // validation etc
    this.employees.push(employee);
  }

  printEmployeeInformation() {
    console.log(this.employees.length);
    console.log(this.employees);
  }
}

3) get and set 
class AccountingDepartment extends Department {
  private lastReport: string;
  get mostRecentReport() {
    if (this.lastReport) {
      return this.lastReport;
    }
    throw new Error('No report found.');
  }
  set mostRecentReport(value: string) {
    if (!value) {
      throw new Error('Please pass in a valid value!');
    }
    this.addReport(value);
  }
} 


4) Abstarct Classes 

abstract class Department {
 abstract describe(this: Department): void;
}

5) Optional 
	? 
	
6) Intersection 
	type Combinable = string | number;
	type Numeric = number | boolean;
	type Universal = Combinable & Numeric;
	
7) 
type Admin = {
  name: string;
  privileges: string[];
};

type Employee = {
  name: string;
  startDate: Date;
};

type UnknownEmployee = Employee | Admin;

function printEmployeeInformation(emp: UnknownEmployee) {
  console.log('Name: ' + emp.name);
  if ('privileges' in emp) { //can't use typeof Admin, because at run time javascript doesn't know about Admin
    console.log('Privileges: ' + emp.privileges);
  }
  if ('startDate' in emp) {
    console.log('Start Date: ' + emp.startDate);
  }
}



class Truck {
  drive() {
    console.log('Driving a truck...');
  }

  loadCargo(amount: number) {
    console.log('Loading cargo ...' + amount);
  }
}

type Vehicle = Car | Truck;

const v1 = new Car();
const v2 = new Truck();

function useVehicle(vehicle: Vehicle) {
  vehicle.drive();
  if (vehicle instanceof Truck) {
    vehicle.loadCargo(1000);
  }
}

useVehicle(v1);
useVehicle(v2);

8) Discriminated Unions 

interface Bird {
  type: 'bird';
  flyingSpeed: number;
}

interface Horse {
  type: 'horse';
  runningSpeed: number;
}

type Animal = Bird | Horse;

function moveAnimal(animal: Animal) {
  let speed;
  switch (animal.type) {
    case 'bird':
      speed = animal.flyingSpeed;
      break;
    case 'horse':
      speed = animal.runningSpeed;
  }
  console.log('Moving at speed: ' + speed);
}

moveAnimal({type: 'bird', flyingSpeed: 10});
		
		
9) typecasting
	// const userInputElement = <HTMLInputElement>document.getElementById('user-input')!;
	const userInputElement = document.getElementById('user-input');

	if (userInputElement) {
	  (userInputElement as HTMLInputElement).value = 'Hi there!';
	}

10) Index Properties

interface ErrorContainer { // { email: 'Not a valid email', username: 'Must start with a character!' }
  [prop: string]: string;
}

const errorBag: ErrorContainer = {
  email: 'Not a valid email!',
  username: 'Must start with a capital character!'
};

12) Optional chaning 
const fetchedUserData = {
  id: 'u1',
  name: 'Max',
  job: { title: 'CEO', description: 'My own company' }
};

console.log(fetchedUserData?.job?.title);

13) Nullish Coalescing
const userInput = undefined;  // const userInput = ''; 
const storedData = userInput ?? 'DEFAULT';
console.log(storedData);



--------
Generics
--------
1) Google GEO codinating Api
2) 

